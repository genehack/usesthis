#!/usr/bin/env ruby
# frozen_string_literal: true

trap("SIGINT") { exit! }

source_path = File.dirname(__dir__)
$LOAD_PATH.unshift(source_path)

require 'httpx'
require 'json'
require 'uri'

Dir
  .glob(File.join(source_path, 'gear', '**', '*.json'))
  .sort
  .each do |path|
    data = JSON.parse(File.read(path))
    needs_lookup = false

    print "- #{data['name']} (#{data['url']}): "

    response = HTTPX.head(data['url'])
    source_url = URI.parse(data['url'])

    case response.status
    when 200
      puts "All good."
    when 301
      puts 'Updated to redirected URL.'
      data['url'] = response.headers['location']
    when (400...499)
      print "Performing an archive lookup (got a #{response.status})... "
      needs_lookup = true
    end

    if needs_lookup
      print "Connection failed - performing an archive lookup (#{data['url']})... "

      archive_request = HTTPX.get("https://archive.org/wayback/available?url=#{URI.encode_www_form_component(data['url'])}")
      if archive_request.nil? || archive_request.headers['memento-location'].nil?
        data['url'] = archive_request.headers['memento-location']
        puts 'Updated (found archive URL)'
      else
        puts 'No archived version found!'
      end
    end

    if data['url'] != source_url.to_s
      data['url'].gsub!(/^http\:\/\//, 'https://') unless data['url'].start_with?('https://')

      File.write(path, JSON.pretty_generate(data))
    end
  end
